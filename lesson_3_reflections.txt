When would you want to use a remote repository rather than keeping all your work
local?

    A remote repository is needed if you want to share your project with other people
    and/or would like them to collaborate with you.

Why might you want to always pull changes manually rather than having Git
automatically stay up-to-date with your remote repository?

    Because GitHub is a public space, your project might be viewed and edited by
    different people at different times. Each new change should be viewed and verified by you
    (as it's your project), but if it's added to your local repository automatically,
    you will lose contol over your own project, which will probably lead to bad
    consequences in the future. 

Describe the differences between forks, clones, and branches.  When would you
use one instead of another?

    You create a branch when you want to introduce an experimental change which may or
    may not eventually make it to the final project. 
    You can clone a repository from a remote computer or server to your own computer so that
    you could edit it locally. 
    You can create a fork out of an existing GitHub repository if you want to edit it yourself.
    Unlike cloning, forking is a GitHub standalone feature that might look like cloning, but it's
    essentially a different thing. Forking creates a copy of somebody else's repository on GitHub 
    on your own GitHub profile, providing a direct reference to the original author's repo.

What is the benefit of having a copy of the last known state of the remote
stored locally?

    It allows you to be able to work on the updated version of the project even if you
    don't have an access to the Internet.

How would you collaborate without using Git or GitHub?  What would be easier,
and what would be harder?

    I would have to share my project source code with others through other online services,
    such as e-mail, social media, skype, dropbox, google drive, etc. But in this case, people
    wouldn't be able to see the state of my project at different points in time, which would 
    make it harder to define where to make an update. Git and GitHub is the best possible solution
    for a effective user-to-contributor interaction.

When would you want to make changes in a separate branch rather than directly in
master?  What benefits does each approach have?

    I would need to make changes in a separate branch if I knew that I'm not the only
    person who is working on the project. When a few or more people are working in one
    repository, they need to be aware of all the changes that might occur to it during the
    development process. So, to make everything up-to-date, you should introduce every new 
    change in a separate branch. Once the change was approved of by all the contributors, you 
    can then merge it with the master branch. If it wasn't approved, you can either rework your
    original idea or simply give this idea up in favor of something else. 
    
    Of course, having to always make other people aware of every change might sound frustrating and
    actually appear to be time-consuming, but it's completely worhth it, especially if your main priority
    is an efficient and well-performing code. 
